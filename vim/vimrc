set nocompatible              " be iMproved, required

" enable Vundle plugin manager
filetype off                  " required

" check if on a Google machine
let s:is_google = filereadable($HOME . "/.vim/google.vim")

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-sensible'
Plugin 'sjl/gundo.vim'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'scrooloose/syntastic'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'majutsushi/tagbar'
Plugin 'jiangmiao/auto-pairs'
Plugin 'mhinz/vim-signify'
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'terryma/vim-expand-region'
Plugin 'tpope/vim-unimpaired'
Plugin 'tpope/vim-eunuch'

" Not for google
if s:is_google==0
  Plugin 'ycm-core/YouCompleteMe'

" Add maktaba, codefmt and glaive for code formatting.
  Plugin 'google/vim-maktaba'
  Plugin 'google/vim-codefmt'
  Plugin 'google/vim-glaive'
endif

" All of your Plugins must be added before the following line
call vundle#end()            " required
if s:is_google==0
  call glaive#Install()
endif

filetype plugin indent on    " required
syntax on

set t_Co=256
set background=dark
colorscheme solarized

let mapleader=","       " leader is comma

set number " show line numbers
set showcmd             " show command in bottom bar
set cursorline          " highlight current line
set wildmenu            " visual autocomplete for command menu
set lazyredraw          " redraw only when we need to.
set incsearch           " search as characters are entered
set hlsearch            " highlight matches
set colorcolumn=80
set title
set autowriteall
set ignorecase
set smartcase

" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>

" move to beginning/end of line
nnoremap B ^
nnoremap E $

" highlight last inserted text
nnoremap gV `[v`]

" jk is escape
inoremap jk <esc>

" toggle gundo
nnoremap <leader>u :GundoToggle<CR>

set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max
" space open/closes folds
nnoremap <space> za
set foldmethod=syntax

let g:airline_solarized_bg='dark'

" mapping keys for split navigation.
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

nnoremap gd :YcmCompleter GoTo<CR>
nnoremap gr :YcmCompleter GoToReferences<CR>

"Close buffer without closing window"
map <leader>q :bp<bar>sp<bar>bn<bar>bd<CR>

"Map tagbar for outline to C-F12
nmap <C-t> :TagbarToggle<CR>

"Close YCM preview window"
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1

" Syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Format lines and files
noremap <leader>fl :FormatLines<CR>
noremap <leader>fc :FormatCode<CR>

let g:signify_disable_by_default = 0
let g:signify_line_highlight = 0
nnoremap <leader>c :SignifyToggle<CR>

map <C-n> :NERDTreeToggle<CR>
nnoremap <C-n><C-f> :NERDTreeFind<CR>

" while in insert mode go to the end of the line to insert
imap <C-e> <esc>$a

" airline settings.
let g:airline_section_x = ''
let g:airline_section_y = ''
let g:airline_section_z = ''
let g:airline_theme='minimalist'

" persistent undo
set undofile
set undodir=~/.vim/undodir

"NERD commenter
let g:NERDDefaultAlign = 'left' " align to left
let g:NERDCommentEmptyLines = 1
let g:NERDCustomDelimiters = {
    \ 'cpp': { 'leftAlt': '//','rightAlt': '', 'left': '//', 'right': '' },
\ }
let g:NERDSpaceDelims = 1

" Search and replace visual selection
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>

" Use hybrid line numbers when in focus, else use absolute
:set number relativenumber
:augroup numbertoggle
:  autocmd!
:  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
:  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
:augroup END

" clang format should use google style
if s:is_google==0
  Glaive vim-codefmt clang_format_style='google'
endif
